package SynthLang.sandbox;

/*Generated by MPS */

import javax.swing.JFrame;
import com.jsyn.Synthesizer;
import com.jsyn.unitgen.UnitOscillator;
import com.jsyn.unitgen.LinearRamp;
import com.jsyn.unitgen.LineOut;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.ImageIcon;
import com.jsyn.JSyn;
import com.jsyn.unitgen.SawtoothOscillatorBL;
import java.awt.GridLayout;
import com.jsyn.swing.ExponentialRangeModel;
import com.jsyn.swing.PortModelFactory;
import com.jsyn.swing.RotaryTextController;
import javax.swing.JPanel;
import com.jsyn.swing.PortControllerFactory;
import java.awt.event.WindowAdapter;

public class SyntheticaView extends JFrame {
  public Synthesizer synth;
  private UnitOscillator osc;
  private LinearRamp lag;
  public LineOut lineOut;

  private JFrame frame;
  private final int WIDTH = 400;
  private final int HEIGHT = 300;
  {
    try {
      for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (Exception e) {
      // keep default LookAndFeel 
    }
  }

  public SyntheticaView() {
    frame = new JFrame();
    frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
    frame.setIconImage(new ImageIcon("icon.png").getImage());
    frame.setTitle("Synthetica");
    frame.setSize(WIDTH, HEIGHT);

    synth = JSyn.createSynthesizer();

    // Add tone Generator 
    synth.add(osc = new SawtoothOscillatorBL());
    // Add a lag to smooth out amplitude changes and avoid pops. 
    synth.add(lag = new LinearRamp());
    // Add output mixer 
    synth.add(lineOut = new LineOut());
    // Connect the Oscillator to the left and right outputs 
    osc.output.connect(0, lineOut.input, 0);
    osc.output.connect(0, lineOut.input, 1);

    // set limits and default for the port 
    lag.output.connect(osc.amplitude);
    lag.input.setup(0.0, 0.2, 1.0);
    lag.time.set(0.2);

    // Arrange the faders in a stack 
    frame.setLayout(new GridLayout(0, 1));

    ExponentialRangeModel amplitudeModel = PortModelFactory.createExponentialModel(lag.input);
    RotaryTextController knob = new RotaryTextController(amplitudeModel, 5);
    knob.setTitle("Amplitude");
    knob.setSize(150, 150);
    JPanel knobPanel = new JPanel();
    knobPanel.add(knob);
    frame.add(knobPanel);

    osc.frequency.setup(50.0, 300.0, 10000.0);
    frame.add(PortControllerFactory.createExponentialPortSlider(osc.frequency));
    frame.validate();

    frame.setLocationRelativeTo(null);
    frame.setResizable(false);
    frame.setVisible(true);
  }

  public void addFrameWindowListener(WindowAdapter adapter) {
    frame.addWindowListener(adapter);
  }
}
