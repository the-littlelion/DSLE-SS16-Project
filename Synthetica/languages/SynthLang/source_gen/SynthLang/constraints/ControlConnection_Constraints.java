package SynthLang.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SReferenceLinkId;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class ControlConnection_Constraints extends BaseConstraintsDescriptor {
  public ControlConnection_Constraints() {
    super(MetaIdFactory.conceptId(0x4367d71c7d554642L, 0x8148026aeb16dfebL, 0x2e5a5b8e811ca259L));
  }
  @Override
  protected Map<SReferenceLinkId, ReferenceConstraintsDescriptor> getNotDefaultSReferenceLinks() {
    Map<SReferenceLinkId, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLinkId, ReferenceConstraintsDescriptor>();
    references.put(MetaIdFactory.refId(0x4367d71c7d554642L, 0x8148026aeb16dfebL, 0x2e5a5b8e811ca259L, 0x2e5a5b8e811ca25dL), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x4367d71c7d554642L, 0x8148026aeb16dfebL, 0x2e5a5b8e811ca259L, 0x2e5a5b8e811ca25dL), this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getReferenceNode(), MetaAdapterFactory.getReferenceLink(0x4367d71c7d554642L, 0x8148026aeb16dfebL, 0x2e5a5b8e811ca259L, 0x2e5a5b8e811ca25cL, "target")), MetaAdapterFactory.getContainmentLink(0x4367d71c7d554642L, 0x8148026aeb16dfebL, 0x2e5a5b8e80c25889L, 0x2e5a5b8e80c524f3L, "inputPorts"));
          }
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_shuvvt_a0a1a0a0a1a0b0a1a1;
          }
        };
      }
    });
    return references;
  }
  private static SNodePointer breakingNode_shuvvt_a0a1a0a0a1a0b0a1a1 = new SNodePointer("r:1ac3782d-9309-4a2b-b205-751025c6985a(SynthLang.constraints)", "3340082741258481483");
}
