package SynthLang.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import java.util.Collection;
import java.util.Collections;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.editor.runtime.style.StyleAttributes;

public class ControlParameters_component implements ConceptEditorComponent {
  public Collection<String> getContextHints() {
    return Collections.emptyList();
  }
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_gkrraa_a(editorContext, node);
  }
  private EditorCell createCollection_gkrraa_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_gkrraa_a");
    editorCell.addEditorCell(this.createConstant_gkrraa_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gkrraa_b0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_gkrraa_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gkrraa_d0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gkrraa_e0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_gkrraa_f0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gkrraa_g0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gkrraa_h0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_gkrraa_i0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gkrraa_j0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gkrraa_k0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_gkrraa_l0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_gkrraa_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "coordinates:");
    editorCell.setCellId("Constant_gkrraa_a0");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_Label(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_gkrraa_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "x");
    editorCell.setCellId("Constant_gkrraa_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_gkrraa_c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("gridPosX");
    provider.setNoTargetText("<no gridPosX>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("CP_property_gridPosX");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_NumericLiteral(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_gkrraa_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ",");
    editorCell.setCellId("Constant_gkrraa_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_gkrraa_e0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "y");
    editorCell.setCellId("Constant_gkrraa_e0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_gkrraa_f0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("gridPosY");
    provider.setNoTargetText("<no gridPosY>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("CP_property_gridPosY");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_NumericLiteral(style, editorCell);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_gkrraa_g0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "grid span:");
    editorCell.setCellId("Constant_gkrraa_g0");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_Label(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_gkrraa_h0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "cells x");
    editorCell.setCellId("Constant_gkrraa_h0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_gkrraa_i0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("spanX");
    provider.setNoTargetText("<no spanX>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("CP_property_spanX");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_NumericLiteral(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_gkrraa_j0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ",");
    editorCell.setCellId("Constant_gkrraa_j0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_gkrraa_k0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "cells y");
    editorCell.setCellId("Constant_gkrraa_k0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_gkrraa_l0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("spanY");
    provider.setNoTargetText("<no spanY>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("CP_property_spanY");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_NumericLiteral(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
}
