package SynthLang.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class check_Connection_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Connection_NonTypesystemRule() {
  }
  public void applyRule(final SNode connection, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNodeOperations.isInstanceOf(SLinkOperations.getTarget(connection, MetaAdapterFactory.getReferenceLink(0x4367d71c7d554642L, 0x8148026aeb16dfebL, 0x43fe12378cc7cd74L, 0x2e5a5b8e80be1ebfL, "source")), MetaAdapterFactory.getInterfaceConcept(0x4367d71c7d554642L, 0x8148026aeb16dfebL, 0x2e5a5b8e80c257cbL, "SynthLang.structure.IHasOutputPort"));
    SNodeOperations.isInstanceOf(SLinkOperations.getTarget(connection, MetaAdapterFactory.getReferenceLink(0x4367d71c7d554642L, 0x8148026aeb16dfebL, 0x43fe12378cc7cd74L, 0x2e5a5b8e80be1f42L, "target")), MetaAdapterFactory.getInterfaceConcept(0x4367d71c7d554642L, 0x8148026aeb16dfebL, 0x2e5a5b8e80c25889L, "SynthLang.structure.IHasInputPort"));
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x4367d71c7d554642L, 0x8148026aeb16dfebL, 0x43fe12378cc7cd74L, "SynthLang.structure.Connection");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
